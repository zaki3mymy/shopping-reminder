name: CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
        - production

env:
  UV_VERSION: "0.5.9"
  PYTHON_VERSION: "3.13"
  AWS_REGION: "ap-northeast-1"

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to AWS
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: ${{ env.UV_VERSION }}
        enable-cache: true

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run tests before deployment
      run: uv run pytest --cov-report=term

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "~1.9.0"

    - name: Create dist directory
      run: mkdir -p dist

    - name: Terraform Init
      run: |
        cd terraform/environments/production
        terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
          -backend-config="key=shopping-reminder/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan
      run: |
        cd terraform/environments/production
        terraform plan \
          -var="notion_api_key=${{ secrets.NOTION_API_KEY }}" \
          -var="notion_database_id=${{ secrets.NOTION_DATABASE_ID }}" \
          -var="notion_page_id=${{ secrets.NOTION_PAGE_ID }}" \
          -out=tfplan

    - name: Terraform Apply
      run: |
        cd terraform/environments/production
        terraform apply tfplan

    - name: Test Lambda deployment
      run: |
        aws lambda invoke \
          --function-name shopping-reminder \
          --payload '{}' \
          response.json
        echo "Lambda response:"
        cat response.json

    - name: Cleanup
      run: rm -f response.json terraform/environments/production/tfplan
      if: always()
