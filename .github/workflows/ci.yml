name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.13"

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    name: Lint and Format Check

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run ruff check
      run: uv run ruff check

    - name: Run ruff format check
      run: uv run ruff format --check

  type-check:
    runs-on: ubuntu-latest
    name: Type Check

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run mypy
      run: uv run mypy src/

  test:
    runs-on: ubuntu-latest
    name: Test

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run tests
      run: uv run pytest --cov-report=html --cov-report=term

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30

  terraform-validate:
    runs-on: ubuntu-latest
    name: Terraform Validation

    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "~1.9.0"

    - name: Terraform format check
      run: terraform fmt -check -recursive terraform/

    - name: Terraform validate (production)
      run: |
        cd terraform/environments/production
        terraform init -backend=false
        terraform validate

  terraform-plan:
    runs-on: ubuntu-latest
    name: Terraform Plan
    if: github.event_name == 'pull_request'
    needs: terraform-validate
    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ap-northeast-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "~1.9.0"

    - name: Terraform Plan
      run: |
        cd terraform/environments/production
        terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
          -backend-config="key=shopping-reminder/terraform.tfstate" \
          -backend-config="region=ap-northeast-1"
        terraform plan \
          -var="notion_api_key=${{ secrets.NOTION_API_KEY }}" \
          -var="notion_database_id=${{ secrets.NOTION_DATABASE_ID }}" \
          -var="notion_page_id=${{ secrets.NOTION_PAGE_ID }}"
